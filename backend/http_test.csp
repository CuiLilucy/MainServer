# Generated by Extended CovScript Compiler
# DO NOT MODIFY
# Date: Sun Mar  5 07:48:43 2023
import ecs
package http_test
import curl
import regex
import codec.json as json
var proxy = null, timeout_ms = 3000, low_speed_limit = 100
namespace utils
	function open_json(path)
		var ifs = iostream.ifstream(path)
		return json.to_var(json.from_stream(ifs))
	end
	function save_json(val, path)
		var ofs = iostream.ofstream(path)
		ofs.print(json.to_string(json.from_var(val)))
	end
	function filter(str, cond)
		var _s = ""
		foreach ch in str
			if cond(ch)
				_s += ch
			end
		end
		return move(_s)
	end
	var url_reg = regex.build("^[a-zA-z]+://([\\w.]+)[^\\s]*$")
	function check_url(url)
		return !utils.url_reg.match(url).empty()
	end
	function get_hostname(url)
		var m = utils.url_reg.match(url)
		if !m.empty()
			return m.str(1)
		else
			return new string
		end
	end
	function http_get(url)
		if !utils.check_url(url)
			system.out.println("cspkg: error when parsing URL \'" + url + "\".")
			return null
		end
		var buff = new iostream.char_buff
		var session = curl.make_session_os(buff.get_ostream())
		session.set_url(url)
		session.allow_redirect(true)
		if proxy != null
			session.set_proxy(proxy)
		end
		session.set_ssl_verify_host(false)
		session.set_ssl_verify_peer(false)
		session.set_connect_timeout_ms(timeout_ms)
		session.set_accept_timeout_ms(timeout_ms)
		session.set_low_speed_limit(low_speed_limit)
		session.set_low_speed_time(timeout_ms)
		if session.perform()
			return buff.get_string()
		else
			return null
		end
	end
	function http_post(url, post_fields)
		if !utils.check_url(url)
			system.out.println("cspkg: error when parsing URL \'" + url + "\".")
			return null
		end
		var buff = new iostream.char_buff
		var session = curl.make_session_os(buff.get_ostream())
		session.set_url(url)
		session.allow_redirect(true)
		if proxy != null
			session.set_proxy(proxy)
		end
		session.set_http_post(true)
		session.set_http_post_fields(post_fields)
		session.set_ssl_verify_host(false)
		session.set_ssl_verify_peer(false)
		session.set_connect_timeout_ms(timeout_ms)
		session.set_accept_timeout_ms(timeout_ms)
		session.set_low_speed_limit(low_speed_limit)
		session.set_low_speed_time(timeout_ms)
		if session.perform()
			return buff.get_string()
		else
			return null
		end
	end
end
